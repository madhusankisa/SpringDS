{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7d18814f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('Badminton Court',)\n",
      "('Table Tennis',)\n",
      "('Snooker Table',)\n",
      "('Pool Table',)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "select name from Facilities where membercost = 0;\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bfdd7f30",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "(4,)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "select count(facid) from Facilities where membercost = 0\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8ad33c04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "(0, 'Tennis Court 1', 5, 200)\n",
      "(1, 'Tennis Court 2', 5, 200)\n",
      "(4, 'Massage Room 1', 9.9, 3000)\n",
      "(5, 'Massage Room 2', 9.9, 3000)\n",
      "(6, 'Squash Court', 3.5, 80)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "SELECT facid, name AS facility_name, membercost, monthlymaintenance FROM Facilities WHERE membercost < 0.2 * monthlymaintenance AND membercost > 0\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "be412dcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "(1, 'Tennis Court 2', 5, 25, 8000, 200)\n",
      "(5, 'Massage Room 2', 9.9, 80, 4000, 3000)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "SELECT * FROM Facilities where facid IN (1,5);\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d33a5075",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('Tennis Court 1', 200, 'expensive')\n",
      "('Tennis Court 2', 200, 'expensive')\n",
      "('Badminton Court', 50, 'cheap')\n",
      "('Table Tennis', 10, 'cheap')\n",
      "('Massage Room 1', 3000, 'expensive')\n",
      "('Massage Room 2', 3000, 'expensive')\n",
      "('Squash Court', 80, 'cheap')\n",
      "('Snooker Table', 15, 'cheap')\n",
      "('Pool Table', 15, 'cheap')\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "SELECT\n",
    "    name AS facility_name,  monthlymaintenance,\n",
    "    CASE\n",
    "        WHEN monthlymaintenance > 100 THEN 'expensive'\n",
    "        ELSE 'cheap'\n",
    "    END AS cost_label\n",
    "FROM Facilities;\n",
    "\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fd813be7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('Darren', 'Smith')\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "SELECT firstname, surname\n",
    "FROM Members\n",
    "WHERE joindate = (\n",
    "    SELECT MAX(joindate)\n",
    "    FROM Members\n",
    ");\n",
    "\n",
    "\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2dd7fa84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 1')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n",
      "(0, 'Tennis Court 2')\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "        SELECT m.firstname +''+ m.surname AS member_name, f.name AS court_name FROM Members m \n",
    "        JOIN Bookings b ON m.memid = b.memid JOIN Facilities f ON b.facid = f.facid WHERE f.name LIKE 'Tennis%'\n",
    "        ORDER BY member_name;\n",
    "\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "16f6d4db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('Massage Room 2', 'GUEST GUEST', 320)\n",
      "('Massage Room 1', 'GUEST GUEST', 160)\n",
      "('Massage Room 1', 'GUEST GUEST', 160)\n",
      "('Massage Room 1', 'GUEST GUEST', 160)\n",
      "('Tennis Court 2', 'GUEST GUEST', 150)\n",
      "('Tennis Court 1', 'GUEST GUEST', 75)\n",
      "('Tennis Court 1', 'GUEST GUEST', 75)\n",
      "('Tennis Court 2', 'GUEST GUEST', 75)\n",
      "('Squash Court', 'GUEST GUEST', 70.0)\n",
      "('Massage Room 1', 'Jemima Farrell', 39.6)\n",
      "('Squash Court', 'GUEST GUEST', 35.0)\n",
      "('Squash Court', 'GUEST GUEST', 35.0)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "        SELECT f.name AS facility_name,\n",
    "               m.firstname || ' ' || m.surname AS member_name,\n",
    "               CASE\n",
    "                   WHEN b.memid = 0 THEN f.guestcost * b.slots\n",
    "                   ELSE f.membercost * b.slots\n",
    "               END AS cost\n",
    "        FROM Bookings b\n",
    "        JOIN Members m ON b.memid = m.memid\n",
    "        JOIN Facilities f ON b.facid = f.facid\n",
    "        WHERE b.starttime >= '2012-09-14' AND b.starttime < '2012-09-15'\n",
    "          AND (b.memid = 0 OR cost > 30)\n",
    "        ORDER BY cost DESC;\n",
    "\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e918353f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('Massage Room 2', 'GUEST GUEST', 320)\n",
      "('Massage Room 1', 'GUEST GUEST', 160)\n",
      "('Massage Room 1', 'GUEST GUEST', 160)\n",
      "('Massage Room 1', 'GUEST GUEST', 160)\n",
      "('Tennis Court 2', 'GUEST GUEST', 150)\n",
      "('Tennis Court 1', 'GUEST GUEST', 75)\n",
      "('Tennis Court 1', 'GUEST GUEST', 75)\n",
      "('Tennis Court 2', 'GUEST GUEST', 75)\n",
      "('Squash Court', 'GUEST GUEST', 70.0)\n",
      "('Massage Room 1', 'Jemima Farrell', 39.6)\n",
      "('Squash Court', 'GUEST GUEST', 35.0)\n",
      "('Squash Court', 'GUEST GUEST', 35.0)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "       SELECT facility_name, member_name, cost\n",
    "        FROM (\n",
    "            SELECT f.name AS facility_name,\n",
    "                   m.firstname || ' ' || m.surname AS member_name,\n",
    "                   CASE\n",
    "                       WHEN b.memid = 0 THEN f.guestcost * b.slots\n",
    "                       ELSE f.membercost * b.slots\n",
    "                   END AS cost\n",
    "            FROM Bookings b\n",
    "            JOIN Members m ON b.memid = m.memid\n",
    "            JOIN Facilities f ON b.facid = f.facid\n",
    "            WHERE b.starttime >= '2012-09-14' AND b.starttime < '2012-09-15'\n",
    "        ) AS subquery\n",
    "        WHERE cost > 30\n",
    "        ORDER BY cost DESC;\n",
    "\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "7c106946",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('Table Tennis', 180)\n",
      "('Snooker Table', 240)\n",
      "('Pool Table', 270)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "        SELECT facility_name, total_revenue\n",
    "        FROM (\n",
    "            SELECT f.name AS facility_name,\n",
    "                   SUM(CASE WHEN b.memid = 0 THEN f.guestcost * b.slots ELSE f.membercost * b.slots END) AS total_revenue\n",
    "            FROM Bookings b\n",
    "            JOIN Facilities f ON b.facid = f.facid\n",
    "            GROUP BY f.facid\n",
    "        ) AS subquery\n",
    "        WHERE total_revenue < 1000\n",
    "        ORDER BY total_revenue;\n",
    "\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7306592f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('Bader, Florence', 'Stibbons, Ponder')\n",
      "('Baker, Anne', 'Stibbons, Ponder')\n",
      "('Baker, Timothy', 'Farrell, Jemima')\n",
      "('Boothe, Tim', 'Rownam, Tim')\n",
      "('Butters, Gerald', 'Smith, Darren')\n",
      "('Coplin, Joan', 'Baker, Timothy')\n",
      "('Crumpet, Erica', 'Smith, Tracy')\n",
      "('Dare, Nancy', 'Joplette, Janice')\n",
      "('Farrell, David', None)\n",
      "('Farrell, Jemima', None)\n",
      "('GUEST, GUEST', None)\n",
      "('Genting, Matthew', 'Butters, Gerald')\n",
      "('Hunt, John', 'Purview, Millicent')\n",
      "('Jones, David', 'Joplette, Janice')\n",
      "('Jones, Douglas', 'Jones, David')\n",
      "('Joplette, Janice', 'Smith, Darren')\n",
      "('Mackenzie, Anna', 'Smith, Darren')\n",
      "('Owen, Charles', 'Smith, Darren')\n",
      "('Pinker, David', 'Farrell, Jemima')\n",
      "('Purview, Millicent', 'Smith, Tracy')\n",
      "('Rownam, Tim', None)\n",
      "('Rumney, Henrietta', 'Genting, Matthew')\n",
      "('Sarwin, Ramnaresh', 'Bader, Florence')\n",
      "('Smith, Darren', None)\n",
      "('Smith, Darren', None)\n",
      "('Smith, Jack', 'Smith, Darren')\n",
      "('Smith, Tracy', None)\n",
      "('Stibbons, Ponder', 'Tracy, Burton')\n",
      "('Tracy, Burton', None)\n",
      "('Tupperware, Hyacinth', None)\n",
      "('Worthington-Smyth, Henry', 'Smith, Tracy')\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "        SELECT m.surname || ', ' || m.firstname AS member_name,\n",
    "               r.surname || ', ' || r.firstname AS recommended_by\n",
    "        FROM Members m\n",
    "        LEFT JOIN Members r ON m.recommendedby = r.memid\n",
    "        ORDER BY m.surname, m.firstname;\n",
    "\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "41783f0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('Badminton Court', 344)\n",
      "('Massage Room 1', 421)\n",
      "('Massage Room 2', 27)\n",
      "('Pool Table', 783)\n",
      "('Snooker Table', 421)\n",
      "('Squash Court', 195)\n",
      "('Table Tennis', 385)\n",
      "('Tennis Court 1', 308)\n",
      "('Tennis Court 2', 276)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "        SELECT f.name AS facility_name,\n",
    "               COUNT(b.bookid) AS usage_count\n",
    "        FROM Facilities f\n",
    "        LEFT JOIN Bookings b ON f.facid = b.facid\n",
    "        WHERE b.memid != 0\n",
    "        GROUP BY f.facid\n",
    "        ORDER BY facility_name;\n",
    "\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "16478e18",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "2. Query all tasks\n",
      "('07', 'Badminton Court', 51)\n",
      "('07', 'Massage Room 1', 77)\n",
      "('07', 'Massage Room 2', 4)\n",
      "('07', 'Pool Table', 103)\n",
      "('07', 'Snooker Table', 68)\n",
      "('07', 'Squash Court', 23)\n",
      "('07', 'Table Tennis', 48)\n",
      "('07', 'Tennis Court 1', 65)\n",
      "('07', 'Tennis Court 2', 41)\n",
      "('08', 'Badminton Court', 132)\n",
      "('08', 'Massage Room 1', 153)\n",
      "('08', 'Massage Room 2', 9)\n",
      "('08', 'Pool Table', 272)\n",
      "('08', 'Snooker Table', 154)\n",
      "('08', 'Squash Court', 85)\n",
      "('08', 'Table Tennis', 143)\n",
      "('08', 'Tennis Court 1', 111)\n",
      "('08', 'Tennis Court 2', 109)\n",
      "('09', 'Badminton Court', 161)\n",
      "('09', 'Massage Room 1', 191)\n",
      "('09', 'Massage Room 2', 14)\n",
      "('09', 'Pool Table', 408)\n",
      "('09', 'Snooker Table', 199)\n",
      "('09', 'Squash Court', 87)\n",
      "('09', 'Table Tennis', 194)\n",
      "('09', 'Tennis Court 1', 132)\n",
      "('09', 'Tennis Court 2', 126)\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    "\n",
    " \n",
    "def create_connection(db_file):\n",
    "    \"\"\" create a database connection to the SQLite database\n",
    "        specified by the db_file\n",
    "    :param db_file: database file\n",
    "    :return: Connection object or None\n",
    "    \"\"\"\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    " \n",
    "    return conn\n",
    "\n",
    " \n",
    "def select_all_tasks(conn):\n",
    "    \"\"\"\n",
    "    Query all rows in the tasks table\n",
    "    :param conn: the Connection object\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    query1 = \"\"\"\n",
    "        SELECT f.name AS facility_name,\n",
    "               COUNT(b.bookid) AS usage_count\n",
    "        FROM Facilities f\n",
    "        LEFT JOIN Bookings b ON f.facid = b.facid\n",
    "        WHERE b.memid != 0\n",
    "        GROUP BY f.facid\n",
    "        ORDER BY facility_name;\n",
    "        \"\"\"\n",
    "    cur.execute(query1)\n",
    " \n",
    "    rows = cur.fetchall()\n",
    " \n",
    "    for row in rows:\n",
    "        print(row)\n",
    "\n",
    "\n",
    "def main():\n",
    "    \n",
    "    database = \"C:/Users/madhu/Downloads/1602668743_SQLFiles_Tier_1_updated_10_13_2020 (1)/SQLFiles Tier 1/sqlite_db_pythonsqlite.db\"\n",
    " \n",
    "    # create a database connection\n",
    "    conn = create_connection(database)\n",
    "    with conn: \n",
    "        print(\"2. Query all tasks\")\n",
    "        select_all_tasks(conn)\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
